Namespace(arch='resnet50', batch_size=36, bottleneck_dim=1024, data='Concatdata', epochs=1, iters_per_epoch=2, log='logs/mcc/Concatdata_D1D2', lr=0.005, lr_decay=0.75, lr_gamma=0.001, momentum=0.9, no_hflip=False, no_pool=False, norm_mean=(0.485, 0.456, 0.406), norm_std=(0.229, 0.224, 0.225), per_class_eval=True, phase='train', print_freq=100, ratio=[0.75, 1.3333333333333333], resize_size=224, root='data/concat_dataset', scale=[0.08, 1.0], scratch=False, seed=0, source=['D1'], target=['D2'], temperature=2.5, trade_off=1.0, train_resizing='default', val_resizing='default', weight_decay=0.001, workers=2)
train_transform:  Compose(
    Compose(
    ResizeImage(size=(256, 256))
    RandomResizedCrop(size=(224, 224), scale=(0.08, 1.0), ratio=(0.75, 1.3333), interpolation=bilinear), antialias=None)
)
    RandomHorizontalFlip(p=0.5)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
val_transform:  Compose(
    Compose(
    ResizeImage(size=(256, 256))
    CenterCrop(size=(224, 224))
)
    ToTensor()
    Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225))
)
=> using model 'resnet50'
lr: 0.0005
Epoch: [0][0/2]	Time 7.4 (7.4)	Data 0.0 (0.0)	Loss 1.74 (1.74)	Trans Loss 0.66 (0.66)	Cls Acc 38.9 (38.9)
Test: [ 0/42]	Time  1.379 ( 1.379)	Loss 1.1123e+00 (1.1123e+00)	Acc@1   8.33 (  8.33)
 * Acc@1 18.20027
 * F1 macro = 0.12085
 * F1 micro= 0.18200
 * precision macro= 0.22824
 * precision micro= 0.18200
 * recall macro = 0.15245
 * recall micro = 0.18200
global correct: 18.2
mean correct:33.2
mean IoU: 6.8
+------------------+--------------------+--------------------+
|      class       |        acc         |        iou         |
+------------------+--------------------+--------------------+
|    E-commerce    | 1.8844220638275146 | 1.6666667461395264 |
| Video on-demand  | 97.69230651855469  | 18.60805892944336  |
| Interactive data |        0.0         |        0.0         |
+------------------+--------------------+--------------------+
Elapsed time: 60.37720227241516
best_acc1 = 18.20027
Test: [ 0/42]	Time  1.299 ( 1.299)	Loss 1.1123e+00 (1.1123e+00)	Acc@1   8.33 (  8.33)
 * Acc@1 18.20027
 * F1 macro = 0.12085
 * F1 micro= 0.18200
 * precision macro= 0.22824
 * precision micro= 0.18200
 * recall macro = 0.15245
 * recall micro = 0.18200
global correct: 18.2
mean correct:33.2
mean IoU: 6.8
+------------------+--------------------+--------------------+
|      class       |        acc         |        iou         |
+------------------+--------------------+--------------------+
|    E-commerce    | 1.8844220638275146 | 1.6666667461395264 |
| Video on-demand  | 97.69230651855469  | 18.60805892944336  |
| Interactive data |        0.0         |        0.0         |
+------------------+--------------------+--------------------+
Test result below...
test_acc1 = 18.20027
F1 macro = 0.12085
F1 micro= 0.18200
precision macro= 0.22824
precision micro= 0.18200
recall macro = 0.15245
recall micro = 0.18200
avg_time = 1076.42857
min_time = 59.00000
max_time = 1184.00000
                  precision    recall  f1-score   support

      E-commerce    0.12605   0.01884   0.03279       796
 Video on-demand    0.18690   0.97692   0.31377       260
Interactive data    0.00000   0.00000   0.00000       422

        accuracy                        0.18200      1478
       macro avg    0.10432   0.33192   0.11552      1478
    weighted avg    0.10077   0.18200   0.07285      1478

Traceback (most recent call last):
  File "mcc_test.py", line 411, in <module>
    main(args)
  File "mcc_test.py", line 241, in main
    val_acc, label='Val Accuracy')
  File "/home/bkcs/HDD/Transfer-Learning-Library/examples/domain_adaptation/image_classification/custom_utils.py", line 30, in plot_graph
    plt.plot(X, y, format, label=label)
  File "/home/bkcs/miniconda3/lib/python3.7/site-packages/matplotlib/pyplot.py", line 2842, in plot
    **({"data": data} if data is not None else {}), **kwargs)
  File "/home/bkcs/miniconda3/lib/python3.7/site-packages/matplotlib/axes/_axes.py", line 1743, in plot
    lines = [*self._get_lines(*args, data=data, **kwargs)]
  File "/home/bkcs/miniconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py", line 273, in __call__
    yield from self._plot_args(this, kwargs)
  File "/home/bkcs/miniconda3/lib/python3.7/site-packages/matplotlib/axes/_base.py", line 399, in _plot_args
    raise ValueError(f"x and y must have same first dimension, but "
ValueError: x and y must have same first dimension, but have shapes (1,) and (0,)
